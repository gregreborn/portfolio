import os
import platform
import subprocess


def rule_exists(ip, action):
    """Check if a rule for the given IP and action already exists."""
    os_type = platform.system()
    try:
        if os_type == "Windows":
            # Use `findstr` to search specifically for the IP
            command = f'netsh advfirewall firewall show rule name=all | findstr "{ip}"'
            result = subprocess.check_output(command, shell=True, text=True)
            return action.capitalize() in result
        elif os_type == "Linux":
            # Optional: Implement iptables rule-check logic if needed
            return False
        else:
            raise NotImplementedError("Unsupported operating system.")
    except subprocess.CalledProcessError:
        # No rules found for the IP
        return False



def block_ip(ip):
    """Block a specific IP address using firewall rules."""
    if rule_exists(ip, "block"):
        print(f"IP {ip} is already blocked. Skipping.")
        return
    if rule_exists(ip, "allow"):
        print(f"IP {ip} is currently allowed. Removing allow rule before blocking.")
        remove_rule(ip, "allow")

    os_type = platform.system()
    try:
        if os_type == "Windows":
            command = f'netsh advfirewall firewall add rule name="Block {ip}" dir=in action=block remoteip={ip}'
        elif os_type == "Linux":
            command = f'sudo iptables -A INPUT -s {ip} -j DROP'
        else:
            raise NotImplementedError("Unsupported operating system.")

        print(f"Executing command: {command}")
        os.system(command)
        print(f"IP {ip} has been successfully blocked.")
    except Exception as e:
        print(f"Failed to block IP {ip}: {e}")


def allow_ip(ip):
    """Allow a specific IP address using firewall rules."""
    if rule_exists(ip, "allow"):
        print(f"IP {ip} is already allowed. Skipping.")
        return
    if rule_exists(ip, "block"):
        print(f"IP {ip} is currently blocked. Removing block rule before allowing.")
        remove_rule(ip, "block")

    os_type = platform.system()
    try:
        if os_type == "Windows":
            command = f'netsh advfirewall firewall add rule name="Allow {ip}" dir=in action=allow remoteip={ip}'
        elif os_type == "Linux":
            command = f'sudo iptables -A INPUT -s {ip} -j ACCEPT'
        else:
            raise NotImplementedError("Unsupported operating system.")

        print(f"Executing command: {command}")
        os.system(command)
        print(f"IP {ip} has been successfully allowed.")
    except Exception as e:
        print(f"Failed to allow IP {ip}: {e}")


def remove_rule(ip, action):
    """Remove a specific firewall rule for an IP."""
    os_type = platform.system()
    try:
        if os_type == "Windows":
            command = f'netsh advfirewall firewall delete rule name=all remoteip={ip}'
        elif os_type == "Linux":
            if action.lower() == "block":
                command = f'sudo iptables -D INPUT -s {ip} -j DROP'
            elif action.lower() == "allow":
                command = f'sudo iptables -D INPUT -s {ip} -j ACCEPT'
        else:
            raise NotImplementedError("Unsupported operating system.")

        print(f"Removing {action} rule for IP {ip}...")
        os.system(command)
        print(f"Rule for IP {ip} successfully removed.")
    except Exception as e:
        print(f"Failed to remove {action} rule for IP {ip}: {e}")
