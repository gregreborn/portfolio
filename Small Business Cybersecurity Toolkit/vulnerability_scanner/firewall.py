import os
import platform
import subprocess



def rule_exists(ip, action, protocol="any"):
    """Check if a rule for the given IP, action, and protocol exists."""
    os_type = platform.system()
    try:
        if os_type == "Windows":
            # Get all rules for the IP
            command = f'netsh advfirewall firewall show rule name=all | findstr /I "{ip}"'
            print(f"Running command: {command}")  # Debugging
            result = subprocess.check_output(command, shell=True, text=True)
            print(f"Command output:\n{result}")  # Debugging

            # Split the result into lines for processing
            lines = result.lower().splitlines()

            for i in range(0, len(lines), 2):  # Iterate in pairs (rule name, remoteip)
                rule_line = lines[i].strip()
                ip_line = lines[i + 1].strip() if i + 1 < len(lines) else ""

                # Check for matching rule name and IP
                if action.lower() in rule_line and ip in ip_line:
                    if protocol.lower() == "any" or protocol in rule_line:
                        print(f"Rule exists for IP {ip}, action {action}, protocol {protocol}")  # Debugging
                        return True

            print(f"No matching rule found for IP {ip}, action {action}, protocol {protocol}")  # Debugging
        else:
            raise NotImplementedError("Unsupported operating system.")
    except subprocess.CalledProcessError:
        # Command returned no matches
        print(f"No rule found for IP {ip}, action {action}, protocol {protocol}")  # Debugging
        return False

    return False



def block_ip(ip, protocol="any"):
    """Block a specific IP address using firewall rules."""
    if rule_exists(ip, "block", protocol):
        print(f"IP {ip} is already blocked for protocol: {protocol}. Skipping.")
        return
    if rule_exists(ip, "allow", protocol):
        print(f"IP {ip} is currently allowed for protocol: {protocol}. Removing allow rule before blocking.")
        remove_rule(ip, "allow", protocol)

    os_type = platform.system()
    try:
        if os_type == "Windows":
            command = f'netsh advfirewall firewall add rule name="Block {ip} {protocol}" dir=in action=block remoteip={ip} protocol={protocol}'
        elif os_type == "Linux":
            command = f'sudo iptables -A INPUT -s {ip} -p {protocol} -j DROP'
        else:
            raise NotImplementedError("Unsupported operating system.")

        print(f"Executing command: {command}")
        os.system(command)
        print(f"IP {ip} has been successfully blocked for protocol: {protocol}.")
    except Exception as e:
        print(f"Failed to block IP {ip}: {e}")


def allow_ip(ip, protocol="any"):
    """Allow a specific IP address using firewall rules."""
    # Check if the IP is already allowed
    if rule_exists(ip, "allow", protocol):
        print(f"IP {ip} is already allowed for protocol: {protocol}. Skipping.")
        return
    
    # Check if the IP is blocked and remove the block rule if it exists
    if rule_exists(ip, "block", protocol):
        print(f"IP {ip} is currently blocked for protocol: {protocol}. Removing block rule before allowing.")
        remove_rule(ip, "block", protocol)

    os_type = platform.system()
    try:
        # Construct the command to allow the IP
        if os_type == "Windows":
            command = f'netsh advfirewall firewall add rule name="Allow {ip} {protocol}" dir=in action=allow remoteip={ip} protocol={protocol}'
        elif os_type == "Linux":
            command = f'sudo iptables -A INPUT -s {ip} -p {protocol} -j ACCEPT'
        else:
            raise NotImplementedError("Unsupported operating system.")

        # Execute the allow command
        print(f"Executing command: {command}")
        os.system(command)
        print(f"IP {ip} has been successfully allowed for protocol: {protocol}.")
    except Exception as e:
        print(f"Failed to allow IP {ip} for protocol {protocol}: {e}")




def remove_rule(ip, action, protocol="any"):
    """Remove specific firewall rules for an IP and protocol, including duplicates."""
    os_type = platform.system()
    try:
        if os_type == "Windows":
            # List all rules for the IP
            command_list = f'netsh advfirewall firewall show rule name=all | findstr /I "{ip}"'
            print(f"Running command to list rules: {command_list}")
            result = subprocess.check_output(command_list, shell=True, text=True)
            lines = result.lower().splitlines()

            # Track and remove matching rules
            removed_count = 0
            for i in range(0, len(lines), 2):  # Iterate in pairs (rule name, remote IP)
                rule_line = lines[i].strip()
                ip_line = lines[i + 1].strip() if i + 1 < len(lines) else ""

                # Check if the rule matches the action and IP
                if action.lower() in rule_line and ip in ip_line:
                    # Match protocol or handle "any" protocol
                    if protocol.lower() == "any" or protocol in rule_line:
                        # Extract rule name 
                        rule_name = rule_line.split(":")[1].strip()
                        delete_command = f'netsh advfirewall firewall delete rule name="{rule_name}"'
                        print(f"Running command to delete rule: {delete_command}")
                        os.system(delete_command)
                        removed_count += 1

            if removed_count > 0:
                print(f"Removed {removed_count} rule(s) for IP {ip}, action {action}, protocol {protocol}.")
            else:
                print(f"No rules found to remove for IP {ip}, action {action}, protocol {protocol}.")

        elif os_type == "Linux":
            # Remove rules using iptables for Linux
            if protocol.lower() == "any":
                command_block = f'sudo iptables -D INPUT -s {ip} -j DROP'
                command_allow = f'sudo iptables -D INPUT -s {ip} -j ACCEPT'
                print(f"Running command to remove block rule: {command_block}")
                os.system(command_block)
                print(f"Running command to remove allow rule: {command_allow}")
                os.system(command_allow)
            else:
                if action.lower() == "block":
                    command = f'sudo iptables -D INPUT -s {ip} -p {protocol} -j DROP'
                elif action.lower() == "allow":
                    command = f'sudo iptables -D INPUT -s {ip} -p {protocol} -j ACCEPT'
                print(f"Running command to remove rule: {command}")
                os.system(command)

            print(f"All rules for IP {ip} and protocol {protocol} successfully removed.")

        else:
            raise NotImplementedError("Unsupported operating system.")
    except subprocess.CalledProcessError:
        print(f"No matching rules found for IP {ip}, action {action}, and protocol {protocol}.")
    except Exception as e:
        print(f"Error during rule removal for IP {ip}, action {action}, and protocol {protocol}: {e}")
